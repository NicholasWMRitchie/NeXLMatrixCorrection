using SpecialFunctions: erf, erfc

"""
    œÅzx1(e0eV::Float64, eceV::Float64, Z::Float64)

X-ray range from Eqn 6 Merlet 1994
"""
function œÅzx1(e0eV::Float64, eceV::Float64, Z::Float64)
    # Zero allocations
    E0, Ec = 0.001*e0eV, 0.001*eceV
    a = 1.845e-6*evalpoly(E0, (2.6,-0.216,0.015,-0.000387,0.00000501))
    x = 2.2-0.0166*E0
    return (a*(E0^x-Ec^x)*(1.0+2.0/(E0^2)))/((1.078 - 0.015*Z^0.7)^(1.2-0.04*Ec))
end

"""
    œÅzm(œÅzx1::Float64, e0eV::Float64, eceV::Float64, Z::Float64)

Position of the maximum of the œï(œÅz) curve (Merlet 1994 eqn 5).
"""
œÅzm(œÅzx1::Float64, e0eV::Float64, eceV::Float64, Z::Float64) = #
    œÅzx1*(0.1+0.35*exp(-0.07*Z))/(1.0+10.0/((e0eV/eceV)^10.0))
# Zero allocations

"""
    Œ¶m(Z::Float64, sh::AtomicSubShell, e0eV::Float64, œÅzm::Float64, œÅzx1::Float64)

The maximum value of the œï(œÅz) curve.
"""
function Œ¶m(Z::Float64, sh::AtomicSubShell, e0eV::Float64, œÅzm::Float64, œÅzx1::Float64)
    # Zero allocations
    t, E0 = œÅzm/œÅzx1, 0.001*e0eV
    œÑ1, œÑ2 = (1.0 - t)^(4.65+0.0356*Z), (1.0 - t)^(1.112+0.00414*Z^2)
    œÑ = œÑ1 + 4.65*(œÑ2 - œÑ1)/evalpoly(Z,(3.54,0.0356,0.00414))
    m, U0 = (n(sh)==1 ? 0.95 : 0.7), e0eV/energy(sh)
    j, A = J(Berger1982, element(sh)), NeXLCore.a(element(sh))
    Ud = U0*(1.0-1.03e5*œÅzm*Z/(E0^1.61*j^0.3*A))
    pZ = -0.25 + 0.0787*Z^0.3
    a = 5.0*(1.0 - 1.0/(1.0+Z)^0.8)/((E0/30.0)^pZ)
    d1, d2 = 1.0 - m, 7.0 - 4.0*exp(-0.1*Z) - m
    b1 = (Ud/U0)^d1*(log(Ud)/log(U0))*(1.0/d1)*(1.0 - (1.0 - 1.0/(Ud^d1))/(d1*log(Ud)))
    b2 = (Ud/U0)^d2*(log(Ud)/log(U0))*(1.0/d2)*(1.0 - (1.0 - 1.0/(Ud^d2))/(d2*log(Ud)))
    QUd, QU0 = log(Ud)/(Ud^m), log(U0)/(U0^m)
    return œÑ*(QUd/QU0)+a*(0.28*(1.0-0.5*exp(-0.1*Z))*b1 + 0.165*Z^0.6*b2)
end

"""
    Œ¶0(Z::Float64, sh::AtomicSubShell, e0eV::Float64)

The value of the œï(œÅz) curve at œÅz=0.
"""
function Œ¶0(Z::Float64, sh::AtomicSubShell, e0eV::Float64)::Float64
    # Zero allocations
    U0, E0 = e0eV/energy(sh), 0.001*e0eV
    d1, d2, d3 = 0.02*Z, 0.1*Z, 0.4*Z
    b1 = (1.0/d1)*(1.0 - (1.0 - 1.0/U0^d1)/(d1*log(U0)))
    b2 = (1.0/d2)*(1.0 - (1.0 - 1.0/U0^d2)/(d2*log(U0)))
    b3 = (1.0/d3)*(1.0 - (1.0 - 1.0/U0^d3)/(d3*log(U0)))
    pZ = -0.25 + 0.0787*Z^0.3
    a = 1.87*Z*evalpoly(log(Z+1.0),(0.0, -0.00391, 0.00721, -0.001067))*(E0/30.0)^pZ
    return 1.0 + a*(0.27*b1 + (1.1 + 5.0/Z)*(b2-1.1*b3))
end

"""
An implementation of Merlet's XFilm matrix correction algorithm as described in Llovett 2010 and Merlet 1994.
"""
struct XPhi <: MatrixCorrection
    subshell::AtomicSubShell
    material::Material
    E0::Float64 # Beam energy
    Œ¶m::Float64  # Max amplitude
    œÅzm::Float64 # œÅz at max amplitude
    Œ±::Float64 # Interior side shape parameter
    Œ≤::Float64 # Surface side shape parameter

    function XPhi(mat::Material, sh::AtomicSubShell, e0::Float64)
        Z, ec = z(mat), energy(sh)
        œÅzx1_v = œÅzx1(e0, ec, Z)
        œÅzm_v = œÅzm(œÅzx1_v, e0, ec, Z)
        Œ¶m_v, Œ¶0_v = Œ¶m(Z, sh, e0, œÅzm_v, œÅzx1_v), Œ¶0(Z, sh, e0)
        Œ±_v, Œ≤_v = 0.46598*(œÅzx1_v - œÅzm_v), œÅzm_v/sqrt(log(Œ¶m_v/Œ¶0_v))
        return new(sh, mat, e0, Œ¶m_v, œÅzm_v, Œ±_v, Œ≤_v)
    end
end

"""
    Œ¶(xphi::XPhi, œÅz::Float64) # W/o absorption
    Œ¶(xphi::XPhi, œÅz::Float64, œá::Float64) # With absorption

The antsatz for œï(œÅz) curve in the XPhi matrix correction algorithm.
"""
Œ¶(xphi::XPhi, œÅz::Float64) =
    œÅz >= 0.0 ? #
        (œÅz < xphi.œÅzm ? #
            xphi.Œ¶m*exp(-((œÅz-xphi.œÅzm)/xphi.Œ≤)^2) : #
            xphi.Œ¶m*exp(-((œÅz-xphi.œÅzm)/xphi.Œ±)^2)) : #
        0.0
Œ¶(xphi::XPhi, œá::Float64, œÅz::Float64) =
    Œ¶(xphi, œÅz)*exp(-œÅz*œá)

"""
    F(xphi::XPhi, ùíú::Float64, ci::Float64, œá::Float64)

ùíú - Instrumental, physical and other poorly known parameters
ci - Mass fraction of the i-th element

The generated intensity in the XPhi model.
"""
F(xphi::XPhi, ùíú::Float64, ci::Float64) = #
    0.5*sqrt(œÄ)*ùíú*ci*xphi.Œ¶m*(xphi.Œ± + xphi.Œ≤*erf(xphi.œÅzm/xphi.Œ≤))

"""
    Fœá(xphi::XPhi, ùíú::Float64, ci::Float64, œá::Float64)


ùíú - Instrumental, physical and other poorly known parameters
ci - Mass fraction of the i-th element
œá - reduced mass absorption coefficient

The emitted intensity in the XPhi model.
"""
Fœá(xphi::XPhi, ùíú::Float64, ci::Float64, œá::Float64) = #
    0.5*sqrt(œÄ)*xphi.Œ¶m*(
        exp(œá*(0.25*xphi.Œ≤^2*œá-xphi.œÅzm))*xphi.Œ≤*(erf(0.5*xphi.Œ≤*œá)+erf(xphi.œÅzm/xphi.Œ≤-0.5*xphi.Œ≤*œá))+
        exp(œá*(0.25*xphi.Œ±^2*œá-xphi.œÅzm))*xphi.Œ±*erfc(0.5*xphi.Œ±*œá)
    )

function Fœáp(xphi::XPhi, ùíú::Float64, ci::Float64, œá::Float64, œÅz0::Float64, œÅz1::Float64)
    res = 0.0
    if œÅz0 < xphi.œÅzm
        œÅmax = min(œÅz1, xphi.œÅzm)
        res += exp(œá*(0.25*xphi.Œ≤^2*œá - xphi.œÅzm))*xphi.Œ≤*
            (erf((œÅ1-xphi.œÅzm)/xphi.Œ≤+0.5*xphi.Œ≤*œá)-erf((œÅ0-xphi.œÅzm)/xphi.Œ≤+0.5*xphi.Œ≤*œá))
    end
    if œÅz1 > xphi.œÅzm
        œÅmin = max(œÅz0, xphi.œÅzm)
        res += exp(œá*(0.25*xphi.Œ±^2*œá - xphi.œÅzm))*xphi.Œ±*
            (erf((œÅ1-xphi.œÅzm)/xphi.Œ±+0.5*xphi.Œ±*œá)-erf((œÅ0-xphi.œÅzm)/xphi.Œ±+0.5*xphi.Œ±*œá))
    end
    return 0.5*sqrt(œÄ)*xphi.Œ¶m*res
end


matrixcorrection(::Type{XPhi}, mat::Material, ashell::AtomicSubShell, e0::Float64) = XPhi(mat, ashell, e0)

function Fœá(xphi::XPhi, xray::CharXRay, Œ∏toa::Float64)
    @assert inner(xray) == xphi.subshell
    return Fœá(xphi, 1.0, 1.0, œá(material(xphi), xray, Œ∏toa))
end
F(xphi::XPhi) = F(xphi, 1.0, 1.0)
Fœáp(xphi::XPhi, xray::CharXRay, Œ∏toa::Real, œÑ::Real) = #
    Fœáp(xphi, 1.0, 1.0, mac(mc.material, xray), 0.0, œÑ)
œï(xphi::XPhi, œÅz) = Œ¶(xphi, œÅz)