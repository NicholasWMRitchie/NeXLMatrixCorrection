## A Simple Example using NeXLMatrixCorrection
Load the necessary libraries
```julia
using NeXLMatrixCorrection  # Inplements the algorithms (auto-loads NeXLCore)
using DataFrames            # For the table
```
##### Convert k-ratios to composition.
Define the measurement conditions
```julia
lbl = label("K458")  # This labels the measurement
# Define the measurement properties (:BeamEnery and :TakeOffAngle are required by most matrix correction algorithms)
unkProps = Dict(:BeamEnergy=>15.0e3, :TakeOffAngle=>deg2rad(40.0), :Coating=>Film(pure(n"C"), 7.0e-7))
stdProps = Dict(:BeamEnergy=>15.0e3, :TakeOffAngle=>deg2rad(40.0), :Coating=>Film(pure(n"C"), 15.0e-7))
# Create a list of the measurement k-ratios.
krs = [
    KRatio([n"O K-L3"], unkProps, stdProps, mat"SiO2", uv(0.746227,0.0010) ),
    KRatio([n"Si K-L3"], unkProps, stdProps, mat"SiO2", uv(0.441263,0.0012) ),
    KRatio([n"Zn K-L3"], unkProps, stdProps, mat"Zn", uv(0.027776,0.0002) ),
    KRatio([n"Ba L3-M5"], unkProps, stdProps, mat"BaCl", uv(0.447794,0.0020) )
]
```
##### Perform the Iteration
```julia
# Now perform the iteration on the k-ratios
res = quantify(lbl, krs)
# Tabulate the results...
asa(DataFrame, res, withZAF=true)
```

Now take a slightly different perspective that focuses more on iteration related data.
```julia
asa(DataFrame, res, withZAF=false)
```

Nicholas W. M. Ritchie, 30-Apr-2020
