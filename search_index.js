var documenterSearchIndex = {"docs":
[{"location":"coatingthickness/#Measuring-the-Coating-Thickness","page":"Coating Thickness","title":"Measuring the Coating Thickness","text":"","category":"section"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Nicholas W. M. Ritchie, 13-Apr-2020; updated 11-May-2020","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Often it is necessary to add a thin conductive coating to the surface of non-conductive samples to minimize the accumulation of electrical charges on or near the surface.  When these charges accumulate they can deflect and distort the beam and reduce the effective beam energy.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"While the coatings are typically a thin as practical to produce the desired conductivity, the material in the coating can influence the transport of electrons and X-rays in the sample.  This is particularly true for soft X-rays like the K lines of Be, B, C, N, O and F or the L- or M-lines of similar energies.  The most common coating material is amorphous carbon deposited from a thread or hot filament although sputtered metal coatings like gold or gold-palladium are favored by some.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"A common strategy for dealing with coatings has two parts. First, the thickness of the coating is measured using a oscillating quartz crystal film thickness monitor.  Second, the sample and the references are coated simultaneously to ensure similar coating thicknesses.  The thickness of the coating is then compensated in the matrix correction algorithm - usually as an additional absorption correction term.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"An alternative strategy is to measure the thickness of the coating using the X-ray signal generated by the coating. This requires providing a standard spectrum for a coating element and measuring the k-ratio of this element in the sample and the other standards.  It is necessary that the measured coating element not be present in the material. For example, it is possible to measure a thin oxidization layer on aluminum using an oxygen standard like alumina (Al₂O₃) or magnesia (MgO).","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"While it is possible to measure the coating element using WDS, it is trivial using EDS.  This information is always available in the measured and standard spectra.  All that is necessary is to provide a bulk standard for the coating element in the fitting process.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"A simple strategy for calculating the k-ratio of a ultra-thin coating on a substrate uses the bulk ϕ(ρz) correction for the coating element in the substrate material to estimate the effective k-ratio.  This requires knowledge of the composition of the substrate.  In the case of standards, this is available.  For unknowns, an estimated composition can be updated in the iteration algorithm.  A root-finding algorithm can then be used to solve for the thickness that produces the measured k-ratio.","category":"page"},{"location":"coatingthickness/#The-Calculation","page":"Coating Thickness","title":"The Calculation","text":"","category":"section"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"First, load 'NeXLSpectrum' to read and fit the spectra and 'NeXLMatrixCorrection' for k-ratio related calculations.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"using NeXLSpectrum\nusing NeXLMatrixCorrection\nusing DataFrames # To tabulate the k-ratios\nusing Gadfly  # To plot the fit residual","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Then read in the spectra - SiO₂ as the measured material, Si, Al₂O₃ and C as the references.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"path=joinpath(@__DIR__, \"spectra\")\nsio2=loadspectrum(joinpath(path,\"SiO2_StdC_15kV7p5nA130kHz_300s.msa\"))\nsi =loadspectrum(joinpath(path,\"Si_StdC_15kV7p5nA130kHz_132kHz24DT_100s.msa\"))\nal2o3 = loadspectrum(joinpath(path,\"Al2O3_StdC_15kV7p5nA130kHz_300s.msa\"))\nc = loadspectrum(joinpath(path,\"C_StdC_15kV7p5nA130kHz_48kHz9DT_100s.msa\"))\ne0, toa = sameproperty([sio2,si,al2o3,c], :BeamEnergy), sameproperty([sio2,si,al2o3,c], :TakeOffAngle)\nplot(sio2, si, al2o3, c, klms=[n\"Si\", n\"Al\", n\"O\", n\"C\" ], xmax=2.5e3)","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"(Image: )","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Build a detector model with details from the spectrum and an estimate of the resolution and low-level discriminator channel.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"det = BasicEDS(length(sio2), energy(1, sio2), channelwidth(1, sio2), 128.0, 120)\nfilt = buildfilter(det)","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"NeXLSpectrum.VariableWidthFilter[NeXLSpectrum.BasicEDS(4096, E[ch] = -482.8\n3378 + 5.003319999999974⋅ch, 128.0 eV @ Mn K-L3, 120, Dict{Shell,Element}(S\nhell[L] => Element(Scandium),Shell[K] => Element(Beryllium),Shell[N] => Ele\nment(Plutonium),Shell[M] => Element(Barium)))]","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Create fitting filters for each element we require from the references.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"refdata = (\n  ( al2o3, n\"O\", mat\"Al2O3\" ),\n  ( si, n\"Si\", mat\"Si\" ),\n  ( c, n\"C\", mat\"C\" ),\n)\nfrs = mapreduce(ref->filterreference(filt, ref...), append!, refdata)","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"3-element Array{NeXLSpectrum.FilteredReference,1}:\n Reference[O K-L3 + 1 other]\n Reference[Si K-L3 + 2 others]\n Reference[C K-L2]","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Now with the fitting filters and the measured SiO₂ spectrum we can perform the fit of Si, O and C to SiO₂.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"res = fit(sio2, filt, frs)\ndisplay(plot(res))","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"(Image: )","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"NeXLUncertainties.asa(DataFrame, kratios(res))","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"3×12 DataFrame\n│ Row │ Element │ Z     │ Lines              │ E0unk   │ E0std   │ θunk    \n │ θstd     │ Standard │ Cstd     │ ΔCstd   │ K         │ ΔK          │\n│     │ String  │ Int64 │ Array{CharXRay,1}  │ Float64 │ Float64 │ Float64 \n │ Float64  │ String   │ Float64  │ Float64 │ Float64   │ Float64     │\n├─────┼─────────┼───────┼────────────────────┼─────────┼─────────┼─────────\n─┼──────────┼──────────┼──────────┼─────────┼───────────┼─────────────┤\n│ 1   │ O       │ 8     │ O K-L3 + 1 other   │ 15000.0 │ 15000.0 │ 0.698132\n │ 0.698132 │ Al2O3    │ 0.470749 │ 0.0     │ 0.992173  │ 0.000449488 │\n│ 2   │ C       │ 6     │ C K-L2             │ 15000.0 │ 15000.0 │ 0.698132\n │ 0.698132 │ C        │ 1.0      │ 0.0     │ 0.0124119 │ 3.91605e-5  │\n│ 3   │ Si      │ 14    │ Si K-L3 + 2 others │ 15000.0 │ 15000.0 │ 0.698132\n │ 0.698132 │ Si       │ 1.0      │ 0.0     │ 0.430509  │ 0.000101609 │","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"From the k-ratios, we can determine the mass-thickness of the carbon layer on the SiO₂ sample.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"k = value(findlabel(res, n\"C K-L2\"),res)\nρz = massthickness(XPP, mat\"SiO2\", mat\"C\", n\"C K-L2\", sio2[:BeamEnergy], sio2[:TakeOffAngle], k)\nprint(\"The thickness is $(round(ρz*1.0e7/density(pure(n\"C\")); sigdigits=3)) nm.\")  # Convert g/cm² to nm of amorphous carbon (1.9 g/cm³)","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"The thickness is 24.4 nm.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"ρz = massthickness(CitZAF, mat\"SiO2\", mat\"C\", n\"C K-L2\", sio2[:BeamEnergy], sio2[:TakeOffAngle], k)\nprint(\"The thickness is $(round(ρz*1.0e7/density(pure(n\"C\")); sigdigits=3)) nm.\")  # Convert g/cm² to nm of amorphous carbon (1.9 g/cm³)","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"The thickness is 17.1 nm.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Finally, we correct the measured k-ratios for Si and O to account for the carbon coating.","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"krs = NeXLMatrixCorrection.correctkratios(kratios(res), mat\"C\", ρz)\nNeXLUncertainties.asa(DataFrame, krs)","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"3×12 DataFrame\n│ Row │ Element │ Z     │ Lines              │ E0unk   │ E0std   │ θunk    \n │ θstd     │ Standard │ Cstd     │ ΔCstd   │ K         │ ΔK          │\n│     │ String  │ Int64 │ Array{CharXRay,1}  │ Float64 │ Float64 │ Float64 \n │ Float64  │ String   │ Float64  │ Float64 │ Float64   │ Float64     │\n├─────┼─────────┼───────┼────────────────────┼─────────┼─────────┼─────────\n─┼──────────┼──────────┼──────────┼─────────┼───────────┼─────────────┤\n│ 1   │ O       │ 8     │ O K-L3 + 1 other   │ 15000.0 │ 15000.0 │ 0.698132\n │ 0.698132 │ Al2O3    │ 0.470749 │ 0.0     │ 1.05011   │ 0.000475736 │\n│ 2   │ C       │ 6     │ C K-L2             │ 15000.0 │ 15000.0 │ 0.698132\n │ 0.698132 │ C        │ 1.0      │ 0.0     │ 0.0124119 │ 3.91605e-5  │\n│ 3   │ Si      │ 14    │ Si K-L3 + 2 others │ 15000.0 │ 15000.0 │ 0.698132\n │ 0.698132 │ Si       │ 1.0      │ 0.0     │ 0.431379  │ 0.000101814 │","category":"page"},{"location":"coatingthickness/","page":"Coating Thickness","title":"Coating Thickness","text":"Usually, the coating compensation is handled in the matrix correction algorithm through providing coating data.","category":"page"},{"location":"testagainstheinrich/#Comparing-Matrix-Correction-Algorithms","page":"Compare to Heinrich","title":"Comparing Matrix Correction Algorithms","text":"","category":"section"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Nicholas W. M. Ritchie 15-May-2020 Added Riveros 12-Jun-2020","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Testing matrix correction algorithms XPP and CitZAF against the k-ratio database published by Heinrich in \"X-Ray Spectroscopy in Electron Beam Instruments\" (1995)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Look to the end of the document for various interesting plots.","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"using CSV\nusing DataFrames\nusing NeXLMatrixCorrection\n\nheinrich =DataFrame!(CSV.File(joinpath(@__DIR__,\"Heinrich1995kratios.csv\"), header=18, skipto=19))\ntrss = Dict(\"Kα\"=>kalpha, \"Kβ\"=>kbeta, \"Lα\"=>lalpha, \"Lβ\"=>lbeta, \"Mα\"=>malpha, \"Mβ\"=>mbeta)\ntrsnames = Dict(1=>\"Kα\", 2=>\"Kβ\", 3=>\"Lα\", 4=>\"Lβ\", 8=>\"Mα\", 9=>\"Mβ\")\nheinrich.Z1 = map(z->elements[z].symbol, heinrich.Z1)\nheinrich.Z2 = map(z->elements[z].symbol, heinrich.Z2)\nheinrich.Line = map(l->trsnames[l], heinrich.Line)\nxppres, czres, rivres = Union{Float64,Missing}[], Union{Float64,Missing}[], Union{Float64,Missing}[]\nfor r in eachrow(heinrich)\n    a, b = parse(Element,r.Z1), parse(Element,r.Z2)\n    e0, θ  = convert(Float64,r.E0), deg2rad(r.TOA)\n    std, unk = pure(a), material(\"Unknown\",Dict(a=>r.C1, b=>1.0-r.C1))\n    kk, lines = r.Kexp, [ brightest(characteristic(a, trss[r.Line])), ]\n    try\n      algs = zafcorrection(XPP, ReedFluorescence, NullCoating, unk, std, lines, e0)\n      push!(xppres, k(algs..., θ, θ)/kk)\n    catch c\n      @show c\n      push!(xppres, missing)\n    end\n    try\n      algs = zafcorrection(CitZAF, ReedFluorescence, NullCoating, unk, std, lines, e0)\n      push!(czres, k(algs..., θ, θ)/kk)\n    catch c\n      @show c\n      push!(czres, missing)\n    end\n    try\n      algs = zafcorrection(Riveros1993, ReedFluorescence, NullCoating, unk, std, lines, e0)\n      push!(rivres, k(algs..., θ, θ)/kk)\n    catch c\n      @show c\n      push!(rivres, missing)\n    end\nend\ninsertcols!(heinrich, ncol(heinrich)+1, :XPP=>xppres)\ninsertcols!(heinrich, ncol(heinrich)+1, :CitZAF=>czres)\ninsertcols!(heinrich, ncol(heinrich)+1, :Riveros=>rivres)\n#display(show(dropmissing!(heinrich)))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"# Items 857 to 860 see to be in error.\nfilter!(r->!(r.Item in 857:860), sort!(heinrich,:XPP))\n# The columns XPP and CitZAF represent the measured k-ratio over the computed k-ratio for these algorithms.\n# Display the table sorted by XPP\ndisplay(heinrich)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"1821×13 DataFrame\n│ Row  │ Item  │ Line   │ Z1     │ Z2     │ C1      │ E0    │ Ec    │ TOA  \n   │ Kexp    │ Origin │ XPP      │ CitZAF   │ Riveros  │\n│      │ Int64 │ String │ String │ String │ Float64 │ Int64 │ Int64 │ Float\n64 │ Float64 │ Int64  │ Float64? │ Float64? │ Float64? │\n├──────┼───────┼────────┼────────┼────────┼─────────┼───────┼───────┼──────\n───┼─────────┼────────┼──────────┼──────────┼──────────┤\n│ 1    │ 136   │ Kα     │ B      │ Zr     │ 0.1789  │ 30000 │ 188   │ 40.0 \n   │ 0.2819  │ 1      │ 0.416139 │ 0.438618 │ 0.0      │\n│ 2    │ 135   │ Kα     │ B      │ Zr     │ 0.1789  │ 25000 │ 188   │ 40.0 \n   │ 0.2691  │ 1      │ 0.434801 │ 0.472184 │ 0.672277 │\n│ 3    │ 134   │ Kα     │ B      │ Zr     │ 0.1789  │ 20000 │ 188   │ 40.0 \n   │ 0.2536  │ 1      │ 0.475214 │ 0.524091 │ 0.708461 │\n│ 4    │ 133   │ Kα     │ B      │ Zr     │ 0.1789  │ 15000 │ 188   │ 40.0 \n   │ 0.2369  │ 1      │ 0.556829 │ 0.606    │ 0.598988 │\n│ 5    │ 132   │ Kα     │ B      │ Zr     │ 0.1789  │ 12000 │ 188   │ 40.0 \n   │ 0.2382  │ 1      │ 0.61098  │ 0.647495 │ 0.656667 │\n│ 6    │ 131   │ Kα     │ B      │ Zr     │ 0.1789  │ 10000 │ 188   │ 40.0 \n   │ 0.2382  │ 1      │ 0.6674   │ 0.689543 │ 0.716394 │\n│ 7    │ 130   │ Kα     │ B      │ Zr     │ 0.1789  │ 8000  │ 188   │ 40.0 \n   │ 0.2452  │ 1      │ 0.722344 │ 0.724066 │ 0.773663 │\n⋮\n│ 1814 │ 188   │ Kα     │ B      │ U      │ 0.1537  │ 10000 │ 188   │ 40.0 \n   │ 0.1634  │ 1      │ 1.74916  │ 1.99283  │ 1.91682  │\n│ 1815 │ 861   │ Kα     │ Cu     │ Zn     │ 5.65    │ 10100 │ 8980  │ 40.0 \n   │ 0.558   │ 5      │ 1.79211  │ 1.79211  │ 1.79211  │\n│ 1816 │ 124   │ Kα     │ B      │ Ni     │ 0.144   │ 8000  │ 188   │ 40.0 \n   │ 0.0282  │ 1      │ 1.8117   │ 1.82623  │ 1.97989  │\n│ 1817 │ 189   │ Kα     │ B      │ U      │ 0.1537  │ 12000 │ 188   │ 40.0 \n   │ 0.1566  │ 1      │ 1.85883  │ 2.12664  │ 2.0153   │\n│ 1818 │ 190   │ Kα     │ B      │ U      │ 0.1537  │ 15000 │ 188   │ 40.0 \n   │ 0.1526  │ 1      │ 1.98604  │ 2.2357   │ 2.11073  │\n│ 1819 │ 165   │ Kα     │ B      │ Nd     │ 0.31    │ 10000 │ 188   │ 40.0 \n   │ 0.166   │ 5      │ 2.10423  │ 2.06951  │ 2.31675  │\n│ 1820 │ 328   │ Kα     │ Al     │ Fe     │ 0.1     │ 2000  │ 1559  │ 75.0 \n   │ 0.0543  │ 5      │ 2.28491  │ 2.03918  │ 2.06745  │\n│ 1821 │ 166   │ Kα     │ B      │ Nd     │ 0.31    │ 15000 │ 188   │ 40.0 \n   │ 0.137   │ 5      │ 2.3164   │ 2.28363  │ 2.50008  │","category":"page"},{"location":"testagainstheinrich/#XPP","page":"Compare to Heinrich","title":"XPP","text":"","category":"section"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Let's visualize this.","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"using Gadfly\nplotargs = (  Stat.histogram(bincount=50), Geom.bar,  Guide.xlabel(\"kMeas/kCalc\"), Guide.ylabel(\"Count\"), Coord.cartesian(xmin=0.0, xmax=2.0) )\n\nplot(heinrich, x=:XPP, plotargs..., Guide.title(\"XPP\"))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/#CitZAF","page":"Compare to Heinrich","title":"CitZAF","text":"","category":"section"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"plot(heinrich, x=:CitZAF, plotargs..., Guide.title(\"CitZAF\"))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/#Riveros","page":"Compare to Heinrich","title":"Riveros","text":"","category":"section"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"plot(heinrich, x=:Riveros, plotargs..., Guide.title(\"Riveros\"))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/#Summary-Statistics","page":"Compare to Heinrich","title":"Summary Statistics","text":"","category":"section"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"describe(heinrich[:,end-2:end], :mean, :std, :min, :q25, :median, :q75, :max)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"3×8 DataFrame\n│ Row │ variable │ mean    │ std      │ min      │ q25      │ median   │ q7\n5     │ max     │\n│     │ Symbol   │ Float64 │ Float64  │ Float64  │ Float64  │ Float64  │ Fl\noat64 │ Float64 │\n├─────┼──────────┼─────────┼──────────┼──────────┼──────────┼──────────┼───\n──────┼─────────┤\n│ 1   │ XPP      │ 1.02407 │ 0.11594  │ 0.416139 │ 0.988486 │ 1.00252  │ 1.\n0253  │ 2.3164  │\n│ 2   │ CitZAF   │ 1.0077  │ 0.144751 │ 0.438618 │ 0.957969 │ 0.993088 │ 1.\n02273 │ 2.28363 │\n│ 3   │ Riveros  │ 1.06529 │ 0.247911 │ 0.0      │ 1.00233  │ 1.02406  │ 1.\n06557 │ 4.08545 │","category":"page"},{"location":"testagainstheinrich/#Low-Z-Performance","page":"Compare to Heinrich","title":"Low Z Performance","text":"","category":"section"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Let's look at the relative performance for low Z elements (z<8).  Sadly, there is no O data :-(","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"lowZ = filter(r->z(parse(Element,r.Z1))<8, heinrich)\ndescribe(lowZ[:,end-2:end], :mean, :std, :min, :q25, :median, :q75, :max)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"3×8 DataFrame\n│ Row │ variable │ mean    │ std      │ min      │ q25      │ median  │ q75\n     │ max     │\n│     │ Symbol   │ Float64 │ Float64  │ Float64  │ Float64  │ Float64 │ Flo\nat64 │ Float64 │\n├─────┼──────────┼─────────┼──────────┼──────────┼──────────┼─────────┼────\n─────┼─────────┤\n│ 1   │ XPP      │ 1.14396 │ 0.289023 │ 0.416139 │ 0.986049 │ 1.05951 │ 1.2\n8341 │ 2.3164  │\n│ 2   │ CitZAF   │ 1.20833 │ 0.341309 │ 0.438618 │ 0.991009 │ 1.13112 │ 1.3\n187  │ 2.28363 │\n│ 3   │ Riveros  │ 1.25253 │ 0.655883 │ 0.0      │ 1.02788  │ 1.16089 │ 1.4\n9209 │ 4.08545 │","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"display(plot(lowZ, x=:CitZAF, plotargs..., Guide.title(\"CitZAF\")))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"display(plot(lowZ, x=:XPP, plotargs..., Guide.title(\"XPP\")))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"display(plot(lowZ, x=:Riveros, plotargs..., Guide.title(\"Riveros\")))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Let's find out which are the \"problem children\".","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"display(sort!(filter(r->abs(1.0-r.XPP)>0.2, lowZ),:XPP))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"59×13 DataFrame\n│ Row │ Item  │ Line   │ Z1     │ Z2     │ C1      │ E0    │ Ec    │ TOA   \n  │ Kexp    │ Origin │ XPP      │ CitZAF   │ Riveros  │\n│     │ Int64 │ String │ String │ String │ Float64 │ Int64 │ Int64 │ Float6\n4 │ Float64 │ Int64  │ Float64? │ Float64? │ Float64? │\n├─────┼───────┼────────┼────────┼────────┼─────────┼───────┼───────┼───────\n──┼─────────┼────────┼──────────┼──────────┼──────────┤\n│ 1   │ 136   │ Kα     │ B      │ Zr     │ 0.1789  │ 30000 │ 188   │ 40.0  \n  │ 0.2819  │ 1      │ 0.416139 │ 0.438618 │ 0.0      │\n│ 2   │ 135   │ Kα     │ B      │ Zr     │ 0.1789  │ 25000 │ 188   │ 40.0  \n  │ 0.2691  │ 1      │ 0.434801 │ 0.472184 │ 0.672277 │\n│ 3   │ 134   │ Kα     │ B      │ Zr     │ 0.1789  │ 20000 │ 188   │ 40.0  \n  │ 0.2536  │ 1      │ 0.475214 │ 0.524091 │ 0.708461 │\n│ 4   │ 133   │ Kα     │ B      │ Zr     │ 0.1789  │ 15000 │ 188   │ 40.0  \n  │ 0.2369  │ 1      │ 0.556829 │ 0.606    │ 0.598988 │\n│ 5   │ 132   │ Kα     │ B      │ Zr     │ 0.1789  │ 12000 │ 188   │ 40.0  \n  │ 0.2382  │ 1      │ 0.61098  │ 0.647495 │ 0.656667 │\n│ 6   │ 131   │ Kα     │ B      │ Zr     │ 0.1789  │ 10000 │ 188   │ 40.0  \n  │ 0.2382  │ 1      │ 0.6674   │ 0.689543 │ 0.716394 │\n│ 7   │ 130   │ Kα     │ B      │ Zr     │ 0.1789  │ 8000  │ 188   │ 40.0  \n  │ 0.2452  │ 1      │ 0.722344 │ 0.724066 │ 0.773663 │\n⋮\n│ 52  │ 125   │ Kα     │ B      │ Ni     │ 0.144   │ 10000 │ 188   │ 40.0  \n  │ 0.0237  │ 1      │ 1.66876  │ 1.81216  │ 1.84918  │\n│ 53  │ 111   │ Kα     │ B      │ Ni     │ 0.0578  │ 12000 │ 188   │ 40.0  \n  │ 0.0073  │ 1      │ 1.68207  │ 2.04823  │ 3.01249  │\n│ 54  │ 188   │ Kα     │ B      │ U      │ 0.1537  │ 10000 │ 188   │ 40.0  \n  │ 0.1634  │ 1      │ 1.74916  │ 1.99283  │ 1.91682  │\n│ 55  │ 124   │ Kα     │ B      │ Ni     │ 0.144   │ 8000  │ 188   │ 40.0  \n  │ 0.0282  │ 1      │ 1.8117   │ 1.82623  │ 1.97989  │\n│ 56  │ 189   │ Kα     │ B      │ U      │ 0.1537  │ 12000 │ 188   │ 40.0  \n  │ 0.1566  │ 1      │ 1.85883  │ 2.12664  │ 2.0153   │\n│ 57  │ 190   │ Kα     │ B      │ U      │ 0.1537  │ 15000 │ 188   │ 40.0  \n  │ 0.1526  │ 1      │ 1.98604  │ 2.2357   │ 2.11073  │\n│ 58  │ 165   │ Kα     │ B      │ Nd     │ 0.31    │ 10000 │ 188   │ 40.0  \n  │ 0.166   │ 5      │ 2.10423  │ 2.06951  │ 2.31675  │\n│ 59  │ 166   │ Kα     │ B      │ Nd     │ 0.31    │ 15000 │ 188   │ 40.0  \n  │ 0.137   │ 5      │ 2.3164   │ 2.28363  │ 2.50008  │","category":"page"},{"location":"testagainstheinrich/#Performance-by-Data-Source","page":"Compare to Heinrich","title":"Performance by Data Source","text":"","category":"section"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Let's look at the relative performance by data source","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"vcat(map(org->describe(filter(r->r.Origin==org, heinrich)[:,end-2:end], :mean, :std, :min, :q25, :median, :q75, :max), 1:11)...)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"33×8 DataFrame\n│ Row │ variable │ mean     │ std       │ min      │ q25      │ median   │ \nq75     │ max     │\n│     │ Symbol   │ Float64  │ Float64   │ Union…   │ Union…   │ Union…   │ \nUnion…  │ Union…  │\n├─────┼──────────┼──────────┼───────────┼──────────┼──────────┼──────────┼─\n────────┼─────────┤\n│ 1   │ XPP      │ 1.06108  │ 0.197942  │ 0.416139 │ 0.988139 │ 1.00165  │ \n1.04864 │ 1.98604 │\n│ 2   │ CitZAF   │ 1.09749  │ 0.247607  │ 0.438618 │ 0.988467 │ 1.02458  │ \n1.12014 │ 2.2357  │\n│ 3   │ Riveros  │ 1.13373  │ 0.460387  │ 0.0      │ 1.02261  │ 1.04829  │ \n1.14829 │ 4.08545 │\n│ 4   │ XPP      │ 1.0013   │ 0.0302697 │ 0.919383 │ 0.988511 │ 1.00496  │ \n1.01699 │ 1.06018 │\n│ 5   │ CitZAF   │ 0.930553 │ 0.0886838 │ 0.773003 │ 0.850813 │ 0.963248 │ \n1.00373 │ 1.05587 │\n│ 6   │ Riveros  │ 1.01054  │ 0.0278175 │ 0.930001 │ 1.00188  │ 1.00995  │ \n1.02204 │ 1.07915 │\n│ 7   │ XPP      │ 1.02806  │ 0.0520892 │ 0.889167 │ 0.998981 │ 1.01122  │ \n1.04469 │ 1.28859 │\n⋮\n│ 26  │ CitZAF   │ 0.996435 │ 0.0311259 │ 0.918866 │ 0.985224 │ 0.993082 │ \n1.00535 │ 1.07921 │\n│ 27  │ Riveros  │ 1.06719  │ 0.0712832 │ 0.994109 │ 1.00628  │ 1.02026  │ \n1.14141 │ 1.19468 │\n│ 28  │ XPP      │ NaN      │ NaN       │          │          │          │ \n        │         │\n│ 29  │ CitZAF   │ NaN      │ NaN       │          │          │          │ \n        │         │\n│ 30  │ Riveros  │ NaN      │ NaN       │          │          │          │ \n        │         │\n│ 31  │ XPP      │ 0.998633 │ 0.0182596 │ 0.959832 │ 0.987556 │ 0.99676  │ \n1.00875 │ 1.0679  │\n│ 32  │ CitZAF   │ 1.01093  │ 0.0235833 │ 0.957343 │ 0.994074 │ 1.00831  │ \n1.02516 │ 1.08213 │\n│ 33  │ Riveros  │ 1.01996  │ 0.0170493 │ 0.997234 │ 1.00773  │ 1.01486  │ \n1.02683 │ 1.08164 │","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"using Compose\norigins = Dict(\n  1 =>\"Bastin’s measurements of borides\",\n  2 => \"Goldstein et al. measurements\",\n  3 => \"J. Colby and D. K. Conley’s measurements\",\n  4 => \"NBS 1 measurements\",\n  5 => \"Pouchou’s compilation\",\n  6 => \"Sewell et al. compilation\",\n  7 => \"Bastin Data Basis\",\n  8 => \"NBS 2 measurements\",\n  9 => \"P. F. Hlava’s (Sandia) measurements\",\n  10 => \"Schreiber’s measurements\",\n  11 => \"Bastin compilation\" )\nset_default_graphic_size(10inch,6inch)\nfor origin in 1:11\n    df = filter(r->r.Origin==origin, heinrich)\n    if nrow(df)>0\n      display(vstack(\n        compose(context(), text(0.5, 0.5, origins[origin], hcenter, vcenter), font(\"Arial\"), fontsize(20pt)),\n        hstack(\n          plot(df, x=:XPP, plotargs..., Guide.title(\"XPP\")),\n          plot(df, x=:CitZAF, plotargs..., Guide.title(\"CitZAF\")),\n          plot(df, x=:Riveros, plotargs..., Guide.title(\"Riveros\"))\n          )))\n    end\nend","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Let's look more closely at Paul's data as XPP shows an anomylous dual hump behavior while CitZAF doesn't.  Puzzling????","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"hlava = filter(r->r.Origin==9, heinrich)\nweird = sort!(filter(r->r.XPP>1.05, hlava), :XPP)\nnotweird = sort!(filter(r->r.XPP<=1.05, hlava), :XPP)\nhstack(\n  plot(weird, x=:XPP, plotargs..., Guide.title(\"Weird\")),\n  plot(notweird, x=:XPP, plotargs..., Guide.title(\"Less So\"))\n)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Compare with CitZAF","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"hstack(\n  plot(weird, x=:CitZAF, plotargs..., Guide.title(\"Weird\")),\n  plot(notweird, x=:CitZAF, plotargs..., Guide.title(\"Less So\"))\n)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Compare with Riveros","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"hstack(\n  plot(weird, x=:Riveros, plotargs..., Guide.title(\"Weird\")),\n  plot(notweird, x=:Riveros, plotargs..., Guide.title(\"Less So\"))\n)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"They are all z=41 (Nb) in z=92 (U) at moderate to high E0","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"display(weird)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"36×13 DataFrame\n│ Row │ Item  │ Line   │ Z1     │ Z2     │ C1      │ E0    │ Ec    │ TOA   \n  │ Kexp    │ Origin │ XPP      │ CitZAF   │ Riveros  │\n│     │ Int64 │ String │ String │ String │ Float64 │ Int64 │ Int64 │ Float6\n4 │ Float64 │ Int64  │ Float64? │ Float64? │ Float64? │\n├─────┼───────┼────────┼────────┼────────┼─────────┼───────┼───────┼───────\n──┼─────────┼────────┼──────────┼──────────┼──────────┤\n│ 1   │ 1098  │ Lα     │ Nb     │ U      │ 0.0189  │ 20000 │ 2371  │ 40.0  \n  │ 0.0156  │ 9      │ 1.06789  │ 0.953513 │ 1.15011  │\n│ 2   │ 1097  │ Lα     │ Nb     │ U      │ 0.0189  │ 15000 │ 2371  │ 40.0  \n  │ 0.0172  │ 9      │ 1.07277  │ 0.966629 │ 1.15532  │\n│ 3   │ 1105  │ Lα     │ Nb     │ U      │ 0.0406  │ 20000 │ 2371  │ 40.0  \n  │ 0.0334  │ 9      │ 1.07486  │ 0.960833 │ 1.15719  │\n│ 4   │ 1091  │ Lα     │ Nb     │ U      │ 0.0132  │ 20000 │ 2371  │ 40.0  \n  │ 0.0108  │ 9      │ 1.07639  │ 0.960834 │ 1.15939  │\n│ 5   │ 1119  │ Lα     │ Nb     │ U      │ 0.0741  │ 20000 │ 2371  │ 40.0  \n  │ 0.0611  │ 9      │ 1.0775   │ 0.965113 │ 1.15953  │\n│ 6   │ 1126  │ Lα     │ Nb     │ U      │ 0.1286  │ 20000 │ 2371  │ 40.0  \n  │ 0.1066  │ 9      │ 1.07974  │ 0.970823 │ 1.16154  │\n│ 7   │ 1102  │ Lα     │ Nb     │ U      │ 0.0189  │ 40000 │ 2371  │ 40.0  \n  │ 0.0112  │ 9      │ 1.08132  │ 1.04168  │ 1.10838  │\n⋮\n│ 29  │ 1121  │ Lα     │ Nb     │ U      │ 0.0741  │ 30000 │ 2371  │ 40.0  \n  │ 0.0501  │ 9      │ 1.10597  │ 1.01609  │ 1.11761  │\n│ 30  │ 1099  │ Lα     │ Nb     │ U      │ 0.0189  │ 25000 │ 2371  │ 40.0  \n  │ 0.0137  │ 9      │ 1.10606  │ 0.996615 │ 1.19468  │\n│ 31  │ 1107  │ Lα     │ Nb     │ U      │ 0.0406  │ 30000 │ 2371  │ 40.0  \n  │ 0.0271  │ 9      │ 1.10972  │ 1.01941  │ 1.12173  │\n│ 32  │ 1109  │ Lα     │ Nb     │ U      │ 0.0406  │ 40000 │ 2371  │ 40.0  \n  │ 0.0235  │ 9      │ 1.11614  │ 1.07356  │ 1.14347  │\n│ 33  │ 1123  │ Lα     │ Nb     │ U      │ 0.0741  │ 40000 │ 2371  │ 40.0  \n  │ 0.0434  │ 9      │ 1.11714  │ 1.07224  │ 1.1436   │\n│ 34  │ 1116  │ Lα     │ Nb     │ U      │ 0.0587  │ 40000 │ 2371  │ 40.0  \n  │ 0.034   │ 9      │ 1.12304  │ 1.07892  │ 1.15005  │\n│ 35  │ 1130  │ Lα     │ Nb     │ U      │ 0.1286  │ 40000 │ 2371  │ 40.0  \n  │ 0.0762  │ 9      │ 1.12762  │ 1.07921  │ 1.15291  │\n│ 36  │ 1093  │ Lα     │ Nb     │ U      │ 0.0132  │ 30000 │ 2371  │ 40.0  \n  │ 0.0086  │ 9      │ 1.12816  │ 1.03646  │ 1.14072  │","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"They are either z=41 (Nb) in z=92 (U) at low E0 or U in Nb.  What is up with Nb in XPP????","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"display(notweird)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"48×13 DataFrame\n│ Row │ Item  │ Line   │ Z1     │ Z2     │ C1      │ E0    │ Ec    │ TOA   \n  │ Kexp    │ Origin │ XPP      │ CitZAF   │ Riveros  │\n│     │ Int64 │ String │ String │ String │ Float64 │ Int64 │ Int64 │ Float6\n4 │ Float64 │ Int64  │ Float64? │ Float64? │ Float64? │\n├─────┼───────┼────────┼────────┼────────┼─────────┼───────┼───────┼───────\n──┼─────────┼────────┼──────────┼──────────┼──────────┤\n│ 1   │ 1124  │ Lα     │ Nb     │ U      │ 0.1286  │ 10000 │ 2371  │ 40.0  \n  │ 0.1417  │ 9      │ 0.983377 │ 0.918866 │ 1.00305  │\n│ 2   │ 1117  │ Lα     │ Nb     │ U      │ 0.0741  │ 10000 │ 2371  │ 40.0  \n  │ 0.0817  │ 9      │ 0.985262 │ 0.918912 │ 1.00758  │\n│ 3   │ 1814  │ Mα     │ U      │ Nb     │ 0.9811  │ 25000 │ 3552  │ 40.0  \n  │ 0.9739  │ 9      │ 0.994797 │ 0.989878 │ 0.994109 │\n│ 4   │ 1816  │ Mα     │ U      │ Nb     │ 0.9811  │ 40000 │ 3552  │ 40.0  \n  │ 0.9663  │ 9      │ 0.995014 │ 0.991214 │ 0.995278 │\n│ 5   │ 1815  │ Mα     │ U      │ Nb     │ 0.9811  │ 35000 │ 3552  │ 40.0  \n  │ 0.968   │ 9      │ 0.995657 │ 0.991385 │ 0.995525 │\n│ 6   │ 1820  │ Mα     │ U      │ Nb     │ 0.9868  │ 25000 │ 3552  │ 40.0  \n  │ 0.9824  │ 9      │ 0.995695 │ 0.992225 │ 0.9952   │\n│ 7   │ 1089  │ Lα     │ Nb     │ U      │ 0.0132  │ 10000 │ 2371  │ 40.0  \n  │ 0.0144  │ 9      │ 0.997337 │ 0.929367 │ 1.02406  │\n⋮\n│ 41  │ 1788  │ Mα     │ U      │ Nb     │ 0.8714  │ 35000 │ 3552  │ 40.0  \n  │ 0.7632  │ 9      │ 1.01332  │ 0.988683 │ 1.01442  │\n│ 42  │ 1785  │ Mα     │ U      │ Nb     │ 0.8714  │ 20000 │ 3552  │ 40.0  \n  │ 0.8027  │ 9      │ 1.01338  │ 0.984421 │ 1.00988  │\n│ 43  │ 1110  │ Lα     │ Nb     │ U      │ 0.0587  │ 10000 │ 2371  │ 40.0  \n  │ 0.0629  │ 9      │ 1.01432  │ 0.94568  │ 1.03822  │\n│ 44  │ 1804  │ Mα     │ U      │ Nb     │ 0.9594  │ 10000 │ 3552  │ 40.0  \n  │ 0.9308  │ 9      │ 1.01889  │ 1.01112  │ 1.01609  │\n│ 45  │ 1791  │ Mα     │ U      │ Nb     │ 0.9259  │ 15000 │ 3552  │ 40.0  \n  │ 0.8796  │ 9      │ 1.02182  │ 1.00524  │ 1.01874  │\n│ 46  │ 1784  │ Mα     │ U      │ Nb     │ 0.8714  │ 15000 │ 3552  │ 40.0  \n  │ 0.8075  │ 9      │ 1.02392  │ 0.997219 │ 1.01984  │\n│ 47  │ 1797  │ Mα     │ U      │ Nb     │ 0.9413  │ 10000 │ 3552  │ 40.0  \n  │ 0.9026  │ 9      │ 1.02536  │ 1.01441  │ 1.02157  │\n│ 48  │ 1783  │ Mα     │ U      │ Nb     │ 0.8714  │ 10000 │ 3552  │ 40.0  \n  │ 0.8161  │ 9      │ 1.02706  │ 1.00568  │ 1.02068  │","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"What about other U?","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"uranium = filter(r->(r.Z1==\"U\") || (r.Z2==\"U\"), heinrich)\nhstack(\n  plot(uranium, x=:XPP, plotargs..., Guide.title(\"XPP\")),\n  plot(uranium, x=:CitZAF, plotargs..., Guide.title(\"CitZAF\")),\n  plot(uranium, x=:Riveros, plotargs..., Guide.title(\"Riveros\"))\n)","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"(Image: )","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"Which rows are zero (close to zero) for the Riveros model?","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"zr= filter(r->r.Riveros<0.01, heinrich)\ndisplay(select(zr, Not([:XPP, :CitZAF, :Origin])))","category":"page"},{"location":"testagainstheinrich/","page":"Compare to Heinrich","title":"Compare to Heinrich","text":"22×10 DataFrame\n│ Row │ Item  │ Line   │ Z1     │ Z2     │ C1      │ E0    │ Ec    │ TOA   \n  │ Kexp    │ Riveros  │\n│     │ Int64 │ String │ String │ String │ Float64 │ Int64 │ Int64 │ Float6\n4 │ Float64 │ Float64? │\n├─────┼───────┼────────┼────────┼────────┼─────────┼───────┼───────┼───────\n──┼─────────┼──────────┤\n│ 1   │ 136   │ Kα     │ B      │ Zr     │ 0.1789  │ 30000 │ 188   │ 40.0  \n  │ 0.2819  │ 0.0      │\n│ 2   │ 184   │ Kα     │ B      │ W      │ 0.0555  │ 15000 │ 188   │ 40.0  \n  │ 0.0188  │ 0.0      │\n│ 3   │ 172   │ Kα     │ B      │ Ta     │ 0.0564  │ 15000 │ 188   │ 40.0  \n  │ 0.0194  │ 0.0      │\n│ 4   │ 61    │ Kα     │ B      │ Ti     │ 0.284   │ 30000 │ 188   │ 40.0  \n  │ 0.109   │ 0.0      │\n│ 5   │ 31    │ Kα     │ B      │ Al     │ 0.8278  │ 30000 │ 188   │ 40.0  \n  │ 0.1694  │ 0.0      │\n│ 6   │ 52    │ Kα     │ B      │ Ti     │ 0.1678  │ 30000 │ 188   │ 40.0  \n  │ 0.0578  │ 0.0      │\n│ 7   │ 30    │ Kα     │ B      │ Al     │ 0.8278  │ 25000 │ 188   │ 40.0  \n  │ 0.1638  │ 0.0      │\n⋮\n│ 15  │ 43    │ Kα     │ B      │ Si     │ 0.6857  │ 15000 │ 188   │ 40.0  \n  │ 0.0713  │ 0.0      │\n│ 16  │ 121   │ Kα     │ B      │ Ni     │ 0.0882  │ 15000 │ 188   │ 40.0  \n  │ 0.016   │ 0.0      │\n│ 17  │ 21    │ Kα     │ B      │ Al     │ 0.4449  │ 12000 │ 188   │ 40.0  \n  │ 0.0396  │ 0.0      │\n│ 18  │ 16    │ Kα     │ B      │ N      │ 0.4348  │ 30000 │ 188   │ 40.0  \n  │ 0.165   │ 0.0      │\n│ 19  │ 965   │ Lα     │ Cu     │ Au     │ 0.1983  │ 48500 │ 931   │ 52.5  \n  │ 0.069   │ 0.0      │\n│ 20  │ 311   │ Kα     │ Al     │ Fe     │ 0.1     │ 40000 │ 1559  │ 20.0  \n  │ 0.011   │ 0.0      │\n│ 21  │ 118   │ Kα     │ B      │ Ni     │ 0.0843  │ 15000 │ 188   │ 40.0  \n  │ 0.0095  │ 0.0      │\n│ 22  │ 112   │ Kα     │ B      │ Ni     │ 0.0578  │ 15000 │ 188   │ 40.0  \n  │ 0.0062  │ 0.0      │","category":"page"},{"location":"testagainstpap/#Testing-Matrix-Correction-Algorithms","page":"Compare To PAP","title":"Testing Matrix Correction Algorithms","text":"","category":"section"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"Testing matrix correction algorithms XPP and CitZAF against the Pouchou and Pichoir k-ratio database.","category":"page"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"using CSV\nusing DataFrames\nusing NeXLMatrixCorrection\n\nfunction mapline(elm, index)\n  trss = Dict(0=>kalpha, 2=>kbeta, 12=>lalpha, 31=>lbeta, 72=>malpha, 69=>mbeta)\n  trs=trss[index]\n  return [ brightest(characteristic(elm, trs)) ]\nend\n\npap = DataFrame!(CSV.File(\"papkratios.csv\", header=3, skipto=4))\nxppres, czres = Union{Float64,Missing}[], Union{Float64,Missing}[]\nfor r in eachrow(pap)\n  try\n    a, b = elements[r.A], elements[r.B]\n    e0, θ  = 1.0e3*r.E0, deg2rad(r.TOA)\n    std, unk = pure(a), material(\"Unknown\",Dict(a=>r.WgtFracA, b=>1.0-r.WgtFracA))\n    kk, lines = r.kA, mapline(a, r.Line)\n    algs = zafcorrection(XPP, ReedFluorescence, NullCoating, unk, std, lines, e0)\n    push!(xppres, k(algs..., θ, θ)/kk)\n    algs = zafcorrection(CitZAF, ReedFluorescence, NullCoating, unk, std, lines, e0)\n    push!(czres, k(algs..., θ, θ)/kk)\n  catch\n    push!(xppres, missing)\n    push!(czres, missing)\n  end\nend\ninsertcols!(pap, ncol(pap)+1, :XPP=>xppres)\ninsertcols!(pap, ncol(pap)+1, :CitZAF=>czres)\ndisplay(pap)","category":"page"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"826×9 DataFrame\n│ Row │ A     │ Line  │ B     │ E0      │ WgtFracA │ kA      │ TOA     │ XP\nP      │ CitZAF   │\n│     │ Int64 │ Int64 │ Int64 │ Float64 │ Float64  │ Float64 │ Float64 │ Fl\noat64? │ Float64? │\n├─────┼───────┼───────┼───────┼─────────┼──────────┼─────────┼─────────┼───\n───────┼──────────┤\n│ 1   │ 13    │ 0     │ 26    │ 20.0    │ 0.241    │ 0.124   │ 52.5    │ 1.\n05918  │ 0.901026 │\n│ 2   │ 13    │ 0     │ 26    │ 25.0    │ 0.241    │ 0.098   │ 52.5    │ 1.\n07042  │ 0.924951 │\n│ 3   │ 13    │ 0     │ 26    │ 30.0    │ 0.241    │ 0.083   │ 52.5    │ 1.\n02594  │ 0.914386 │\n│ 4   │ 26    │ 0     │ 13    │ 20.0    │ 0.759    │ 0.736   │ 52.5    │ 0.\n996823 │ 1.00185  │\n│ 5   │ 26    │ 0     │ 13    │ 25.0    │ 0.759    │ 0.742   │ 52.5    │ 0.\n990216 │ 0.990101 │\n│ 6   │ 26    │ 0     │ 13    │ 30.0    │ 0.759    │ 0.748   │ 52.5    │ 0.\n982697 │ 0.978262 │\n│ 7   │ 26    │ 0     │ 16    │ 10.0    │ 0.466    │ 0.406   │ 75.0    │ 1.\n04115  │ 1.07304  │\n⋮\n│ 819 │ 42    │ 12    │ 7     │ 6.0     │ 0.942    │ 0.9023  │ 40.0    │ 1.\n01017  │ 1.03023  │\n│ 820 │ 42    │ 12    │ 7     │ 8.0     │ 0.942    │ 0.9078  │ 40.0    │ 1.\n0082   │ 1.02528  │\n│ 821 │ 42    │ 12    │ 7     │ 10.0    │ 0.942    │ 0.9122  │ 40.0    │ 1.\n00652  │ 1.02104  │\n│ 822 │ 42    │ 12    │ 7     │ 12.0    │ 0.942    │ 0.9163  │ 40.0    │ 1.\n00473  │ 1.01683  │\n│ 823 │ 42    │ 12    │ 7     │ 15.0    │ 0.942    │ 0.922   │ 40.0    │ 1.\n00209  │ 1.01059  │\n│ 824 │ 42    │ 12    │ 7     │ 20.0    │ 0.942    │ 0.9268  │ 40.0    │ 1.\n00213  │ 1.00443  │\n│ 825 │ 42    │ 12    │ 7     │ 25.0    │ 0.942    │ 0.936   │ 40.0    │ 0.\n996914 │ 0.992622 │\n│ 826 │ 42    │ 12    │ 7     │ 30.0    │ 0.942    │ 0.9399  │ 40.0    │ 0.\n996953 │ 0.985872 │","category":"page"},{"location":"testagainstpap/#XPP","page":"Compare To PAP","title":"XPP","text":"","category":"section"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"Let's visualize this.","category":"page"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"using Gadfly\nplot(pap, x=:XPP, y=:XPP, Stat.histogram(bincount=50), Geom.bar, Guide.title(\"XPP\"))","category":"page"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"(Image: )","category":"page"},{"location":"testagainstpap/#CitZAF","page":"Compare To PAP","title":"CitZAF","text":"","category":"section"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"plot(pap, x=:CitZAF, y=:CitZAF, Stat.histogram(bincount=50), Geom.bar, Guide.title(\"CitZAF\"))","category":"page"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"(Image: )","category":"page"},{"location":"testagainstpap/#Summary-Statistics","page":"Compare To PAP","title":"Summary Statistics","text":"","category":"section"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"describe(pap[:,end-1:end], :mean, :std, :min, :q25, :median, :q75, :max)","category":"page"},{"location":"testagainstpap/","page":"Compare To PAP","title":"Compare To PAP","text":"2×8 DataFrame\n│ Row │ variable │ mean     │ std       │ min      │ q25      │ median   │ \nq75     │ max     │\n│     │ Symbol   │ Float64  │ Float64   │ Float64  │ Float64  │ Float64  │ \nFloat64 │ Float64 │\n├─────┼──────────┼──────────┼───────────┼──────────┼──────────┼──────────┼─\n────────┼─────────┤\n│ 1   │ XPP      │ 1.00355  │ 0.0264633 │ 0.897411 │ 0.989226 │ 0.999223 │ \n1.0121  │ 1.19012 │\n│ 2   │ CitZAF   │ 0.990101 │ 0.0477465 │ 0.848773 │ 0.96709  │ 0.995988 │ \n1.01802 │ 1.19848 │","category":"page"},{"location":"#![](NeXL_sm.png)MatrixCorrection-Part-of-the-NeXL-X-ray-Microanalysis-Library","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"","category":"section"},{"location":"#Installing-NeXLMatrixCorrection.jl","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"Installing NeXLMatrixCorrection.jl","text":"","category":"section"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"NeXLMatrixCorrection is available throught the standard Julia registry and can be installed using the standard package manager.","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"julia> ]add NeXLMatrixCorrection","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"or","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"julia> using Pkg\r\njulia> Pkg.add(\"NeXLMatrixCorrection\")","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"The matrix correction package in the NeXL microanalysis library for Julia.  NeXLMatrixCorrection depends upon NeXLUncertainties and NeXLCore which are automatically installed when NeXLMatrixCorrection is installed.","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"Currently NeXLMatrixCorrection implements the XPP, CitZAF and Riveros matrix correction and Reed fluorescence correction algorithms for bulk and coated samples.  The library is designed to make it easy to add additional algorithms.","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"Primarily the algorithms in NeXLMatrixCorrection are designed to take a Vector{NeXLCore.KRatio} and return a NeXLCore.Material.  Since they are intended for both WDS and EDS, the k-ratio can represent one or more characteristic X-ray lines from a single element.  K-ratios compare a measured intensity with the intensity from a reference (standard) material. Typically, these two materials are measured at the same beam energy but multiple beam energy measurements are also supported.","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"The primary method is","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"function quantify(\r\n    iter::Iteration,  # The Iteration object providing algorithmic details\r\n    label::Label,     # A label for the unknown\r\n    measured::Vector{KRatio}, # A complete set of k-ratios (one per element)\r\n    maxIter::Int = 100, # The maximum number of iterations to try before\r\n)::IterationResult","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"which is wrapped as","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"quantify(iter::Iteration, sampleName::String, measured::Vector{KRatio})","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"and","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"quantify(ffr::FilterFitResult,...)","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"to simplify usage.","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"The KRatio structure is defined in NeXLCore.","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"KRatio(\r\n    lines::Vector{CharXRay},\r\n    unkProps::Dict{Symbol,<:Any},\r\n    stdProps::Dict{Symbol,<:Any},\r\n    standard::Material,\r\n    kratio::AbstractFloat,\r\n)","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"Usually it is sufficient to define the unkProps and stdProps corresponding to the :BeamEnergy, the :TakeOffAngle which are, of course, in eV and radians.","category":"page"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"KRatio(\r\n  characteristic(n\"F\",ktransitions), # Builds a vector containing all the K shell characteristic x-rays for F\r\n  # [ n\"F K-L3\" ], # An alternative with only one transition\r\n  Dict(:BeamEnergy=>15.0e3, :TakeOffAngle=>deg2rad(40.0)),\r\n  Dict(:BeamEnergy=>15.0, :TakeOffAngle=>deg2rad(40.0)),\r\n  mat\"CaF2\",  # The standard material\r\n  0.324 # The k-ratio\r\n)","category":"page"},{"location":"#Structure-and-Method-Documentation","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"Structure and Method Documentation","text":"","category":"section"},{"location":"","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","text":"Modules = [NeXLMatrixCorrection]","category":"page"},{"location":"#NeXLMatrixCorrection.AllBelowTolerance","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.AllBelowTolerance","text":"The AllBelowTolerance ConvergenceTest ensures that the difference between measured and computed is below a threshold for each k-ratio.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.Coating","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Coating","text":"Coating\n\nImplements a simple multi-layer coating correction.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.CoatingCorrection","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.CoatingCorrection","text":"An abstract type for implementing coating correction algorithms.\n\nNeXLCore.transmission(zaf::CoatingCorrection, xray::CharXRay)\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.ConvergenceTest","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ConvergenceTest","text":"The ConvergenceTest abstract type represents mechanisms to decide when the iteration has converged.\n\nconverged(ct::ConvergenceTest, meas::Vector{KRatio}, computed::Dict{Element,Float64})::Bool\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.FluorescenceCorrection","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.FluorescenceCorrection","text":"An abstract type for implementing secondary-fluorescence corrections.\n\nF(unk::FluorescenceCorrection, xray::CharXRay, θtoa::AbstractFloat)\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.IsApproximate","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.IsApproximate","text":"The IsApproximate ConvergenceTest checks that the k-ratio differences are either below an absolute threshold or a relative tolerance.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.Iteration","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Iteration","text":"Collects the information necessary to define the iteration process including the MatrixCorrection and FLuorescenceCorrection algorithms, the iteration UpdateRule, the ConvergenceTest, and an UnmeasuredElementRule.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.IterationResult","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.IterationResult","text":"IterationResult contains the results of the iteration process including a Label identifying the source of the k-ratios, the resulting Material, the initial and final k-ratios, whether the iteration converged and the number of steps.  The results can be output using asa(DataFrame, ir::IterationResult).\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.KRatioOptimizer","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.KRatioOptimizer","text":"KRatioOptimizer\n\nDefines an optimizeks(kro::KRatioOptimizer, krs::Vector{KRatio})::Vector{KRatio} method which takes a vector of k-ratios which may have redundant data (more than one KRatio per element) and trims it down to a vector of k-ratios with one KRatio per element.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.MatrixCorrection","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.MatrixCorrection","text":"MatrixCorrection is an abstract type for computing ϕ(ρz)-type matrix correction algorithms.  A sub-class MCA <: MatrixCorrection should implement\n\n# Integral of the area under the ϕ(ρz)-curve\nF(mc::MCA)\n# Integral of the transmitted area under the ϕ(ρz)-curve\nFχ(mc::MCA, xray::CharXRay, θtoa::Real)\n# Area under 0 to τ under the transmitted ϕ(ρz)-curve\nFχp(mc::MCA, xray::CharXRay, θtoa::Real, τ::Real)\n# The ϕ(ρz)-curve\nϕ(mc::MCA, ρz)\n# A factory method from MCA\nmatrixcorrection(::Type{MCA}, mat::Material, ashell::AtomicSubShell, e0)::MCA\n\nThe algorithm should precompute as much as possible based on the Material, AtomicSubShell and beam energy.  The class MCA should define member variables subshell::AtomicSubShell, material::Material and E0::AbstractFloat to store the input values. See XPP for an example.\n\nFrom these methods, other methods like Z(...), A(...) are implemented.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.MultiZAF","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.MultiZAF","text":"The MultiZAF structure holds the information necessary to perform matrix correction on a collection of characteristic X-rays that were measured simultaneously from the same element. Use zafcorrection(...) to construct these rather than the internal constructor.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.NaiveUpdateRule","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.NaiveUpdateRule","text":"The NaiveUpdateRule implements the 'method of successive approximations' to update the composition between iteration steps.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.NullCoating","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.NullCoating","text":"NullCoating\n\nNo coating (100%) transmission.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.NullFluorescence","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.NullFluorescence","text":"NullFluorescence\n\nImplements Castaing's First Approximation (i.e. No correction F=1)\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.NullUnmeasuredRule","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.NullUnmeasuredRule","text":"The NullUnmeasuredRule adds no additional elements in the iteration process.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.RMSBelowTolerance","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.RMSBelowTolerance","text":"The RMSBelowTolerance ConvergenceTest ensures that the root-mean-squared difference between measured and computed is below a threshold.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.RecordingUpdateRule","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.RecordingUpdateRule","text":"The RecordingUpdateRule wraps other UpdateRule instances to provide diagnostics which may be tabulated using asa(DataFrame, rur::RecordingUpdateRule) or plotted using Gadfly's plot(rur::RecordingUpdateRule).\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.ReedFluorescence","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ReedFluorescence","text":"The ReedFluorescence structure implements FluorescenceCorrection for the Reed fluorescence model.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.ReedInternal","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ReedInternal","text":"The ReedInternal structure optimizes the calculation of the Reed correction algorithm.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.Riveros1993","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Riveros1993","text":"@article{riveros1993review,   title={Review of ϕ(ρz) curves in electron probe microanalysis},   author={Riveros, Jose and Castellano, Gustavo},   journal={X-Ray Spectrometry},   volume={22},   number={1},   pages={3–10},   year={1993},   publisher={Wiley Online Library} }\n\nThe instruction in Packwood1991 in Electron Probe Quantitation is: \"For compounds weight averaging is used for all appropriate variables: Z, Z/A, η, and (Z/A)log(1.166(E0-Ec)/2J)\"\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.SimpleKRatioOptimizer","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.SimpleKRatioOptimizer","text":"SimpleKRatioOptimizer\n\nImplements a simple optimizer based on shell first, overvoltage next and brightness last.  Once it picks an optimum set of lines for an element, it will not change.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.UnmeasuredElementRule","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.UnmeasuredElementRule","text":"The UnmeasuredElementRule mechanism provides a method to implement rules for adding unmeasured elements to the fitting process.  Examples include element-by-stoichiometry or element-by-difference.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.UpdateRule","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.UpdateRule","text":"The UpdateRule abstract type defines mechanisms to update the best composition estimate between iteration steps.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.WegsteinUpdateRule","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.WegsteinUpdateRule","text":"The WegsteinUpdateRule implements the very effective method of Reed and Mason (S.J.B. Reed and P.K. Mason, Transactions ofthe Second National Conference on Electron Microprobe Analysis, Boston, 1967.) for updating the composition estimate between iteration steps.\n\n\n\n\n\n","category":"type"},{"location":"#NeXLMatrixCorrection.ZAFCorrection","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ZAFCorrection","text":"ZAFCorrection\n\nPulls together the ZA, F and coating corrections into a single structure.\n\n\n\n\n\n","category":"type"},{"location":"#Base.range","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"Base.range","text":"range(::Type{XPP}, mat::MaterialLabel, e0, inclDensity=true)\nrange(ty::Type{<:BetheEnergyLoss}, mat::Material, e0::Float64, inclDensity=true; emin=50.0, mip::Type{<:NeXLMeanIonizationPotential}=Berger1982)\n\nTotal trajectory (range) of an electron with initial energy e0 (eV). (Units: inclDensity ? cm : cm/(g/cm³))\n\n\n\n\n\n","category":"function"},{"location":"#NeXLCore.J-Tuple{Type{XPP},Material}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.J","text":"J(::Type{XPP}, mat::Material)\n\nMean ionization potential for the specified material in eV. (PAP1991 Eqn 6)\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.a-Tuple{Type{XPP},Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.a","text":"a(b, ϵ)\n\nXPP ϕ(ρz) model parameter a\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.atomicsubshell-Tuple{MatrixCorrection}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.atomicsubshell","text":"NeXLCore.atomicsubshell(mc::MatrixCorrection)\n\nThe sub-shell for which this MatrixCorrection has been calculated.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.atomicsubshells-Tuple{MultiZAF}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.atomicsubshells","text":"shells(mz::MultiZAF)\n\nA set of all sub-shells supported by this MultiZAF\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.characteristic-Tuple{MultiZAF}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.characteristic","text":"NeXLCore.characteristic(mz::MultiZAF)\n\nThe X-rays associated with this MultiZAF.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.element-Tuple{MultiZAF}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.element","text":"NeXLCore.element(mz::MultiZAF)\n\nThe element associate with this MultiZAF\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.material-Tuple{IterationResult}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.material","text":"NeXLCore.material(itres::IterationResult)::Material\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.material-Tuple{MatrixCorrection}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.material","text":"NeXLCore.material(mc::MatrixCorrection) = mc.material\n\nThe material for which this MatrixCorrection has been calculated.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.transmission-Tuple{Coating,CharXRay,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.transmission","text":"NeXLCore.transmission(zaf::Coating, xray::CharXRay, toa)\n\nCalculate the transmission fraction for the specified X-ray through the coating in the direction of the detector.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLCore.transmission-Tuple{NullCoating,CharXRay,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLCore.transmission","text":"NeXLCore.transmission(zaf::NullCoating, xray::CharXRay, toa)\n\nCalculate the transmission fraction for the specified X-ray through no coating (1.0).\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.A-Tuple{MatrixCorrection,MatrixCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.A","text":"A(unk::MatrixCorrection, std::MatrixCorrection, xray::CharXRay, χcunk=0.0, tcunk=0.0, χcstd=0.0, tcstd=0.0)\n\nThe absorption correction factors.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.A-Tuple{MultiZAF,MultiZAF,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.A","text":"A(unk::MultiZAF, std::MultiZAF, θunk::AbstractFloat, θstd::AbstractFloat)\n\nThe A (absorption) correction for unk relative to std.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.A-Tuple{Type{XPP},Any,Any,Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.A","text":"A(B, b, ϕ0, F, ϵ)\n\nXPP ϕ(ρz) model parameter A\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.A-Tuple{ZAFCorrection,ZAFCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.A","text":"A(unk::ZAFCorrection, std::ZAFCorrection, cxr::CharXRay, θunk::AbstractFloat, θstd::AbstractFloat)\n\nComputes the absorption correction.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.B-Tuple{Type{XPP},Any,Any,Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.B","text":"B(b, F, P, ϕ0, ϵ)\n\nXPP ϕ(ρz) model parameter B\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.F-Tuple{MatrixCorrection}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.F","text":"F(mc::MatrixCorrection)\n\nIntegral of the ϕ(ρz)-curve from ρz = 0 to ∞.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.F-Tuple{MultiZAF,MultiZAF,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.F","text":"F(unk::MultiZAF, std::MultiZAF, θunk::AbstractFloat, θstd::AbstractFloat)\n\nThe F (fluoresence) correction for unk relative to std.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.F-Tuple{ReedFluorescence,CharXRay,Float64}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.F","text":"F(reed::ReedFluorescence, secondary::CharXRay, toa::Float64)\n\nCompute the enhancement of the secondary characteristic X-ray due to the primaries specified in reed.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.F-Tuple{ZAFCorrection,ZAFCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.F","text":"F(unk::ZAFCorrection, std::ZAFCorrection, cxr::CharXRay, θunk::AbstractFloat, θstd::AbstractFloat)\n\nComputes the secondary fluorescence correction.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.Fχ-Tuple{MatrixCorrection,CharXRay,Real}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Fχ","text":"Fχ(mc::MatrixCorrection, xray::CharXRay, θtoa::Real)\n\nIntegral of the area under the absorption corrected ϕ(ρz)-curve from ρz = 0 to ∞.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.Fχp-Tuple{MatrixCorrection,CharXRay,Real,Real}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Fχp","text":"Fχp(mc::NeXLMatrixCorrection, xray::CharXRay, θtoa::Real, τ::Real)\n\nThe partial integral of the absorption corrected ϕ(ρz) curve from ρz = 0 to τ #\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.Fχp-Tuple{Type{XPP},Any,Any,Any,Any,Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Fχp","text":"Fχp(::Type{XPP}, χ, A, a, B, b, ϕ0, τ)\n\nThe integral of the ϕ(ρz) exp(-χ ρz) from 0 to τ.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.M-Tuple{Type{XPP},Material}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.M","text":"M(mat::Material)\n\nP&P's M from top line in page 35\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.QlA-Tuple{Type{XPP},Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.QlA","text":"QlA(U,El,m)\n\nComputes the relative ionization cross-section.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.R-Tuple{Type{XPP},Material,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.R","text":"R(mat::Material, u0)\n\nBackscatter factor as a function of material and overvoltage. Compares well to PAP Figure 23.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.R0-Tuple{Type{XPP},Any,Any,Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.R0","text":"R0(J, D, P, M, Ekev)\n\nTotal trajectory (range) of an electron with initial energy Ekev. (in cm/(g/cm^3))\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.S-Tuple{Type{XPP},Material,AtomicSubShell,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.S","text":"S(mat, ashell, E)\n\nComputes S, the stopping power at the specified energy (in keV)\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.Z-Tuple{MatrixCorrection,MatrixCorrection}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Z","text":"Z(unk::MatrixCorrection, std::MatrixCorrection)\n\nThe atomic number correction factor.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.Z-Tuple{MultiZAF,MultiZAF}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Z","text":"Z(unk::MultiZAF, std::MultiZAF)\n\nThe Z (atomic number) correction for unk relative to std.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.Z-Tuple{ZAFCorrection,ZAFCorrection}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.Z","text":"Z(unk::ZAFCorrection, std::ZAFCorrection)\n\nComputes the atomic number correction.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ZA-Tuple{MatrixCorrection,MatrixCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ZA","text":"ZA(\n  unk::MatrixCorrection,\n  std::MatrixCorrection,\n  xray::CharXRay,\n  θunk::AbstractFloat,\n  θstd::AbstractFloat\n)\n\nThe atomic number (Z) and absorption (A) correction factors.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ZA-Tuple{ZAFCorrection,ZAFCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ZA","text":"ZA(unk::ZAFCorrection, std::ZAFCorrection, cxr::CharXRay, θunk::AbstractFloat, θstd::AbstractFloat)\n\nComputes the combined atomic number and fluorescence correction.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ZAFc-Tuple{ZAFCorrection,ZAFCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ZAFc","text":"ZAFc(unk::ZAFCorrection, std::ZAFCorrection, cxr::CharXRay, θunk::AbstractFloat, θstd::AbstractFloat)\n\nComputes the combined correction for atomic number, absorption, secondary fluorescence and generation.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.b-Tuple{Type{XPP},Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.b","text":"b(Rbar, ϕ0, F)\n\nXPP ϕ(ρz) model parameter b\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.beamEnergy-Tuple{MatrixCorrection}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.beamEnergy","text":"beamEnergy(mc::MatrixCorrection) = mc.E0\n\nThe beam energy (eV) for which this MatrixCorrection has been calculated.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.carboncoating-Tuple{Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.carboncoating","text":"carboncoating(nm)\n\nConstructs a carbon coating of the specified thickness (in nanometers).\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.coating-Tuple{MultiZAF,MultiZAF,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.coating","text":"coating(unk::MultiZAF, std::MultiZAF, θunk::AbstractFloat, θstd::AbstractFloat)\n\nThe conductive (or other) coating correction factor.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.coating-Tuple{ZAFCorrection,ZAFCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.coating","text":"coating(unk::ZAFCorrection, std::ZAFCorrection, cxr::CharXRay, θunk::AbstractFloat, θstd::AbstractFloat)\n\nComputes the coating correction.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.compute-Tuple{NullUnmeasuredRule,Dict{Element,Float64}}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.compute","text":"compute(::Type{UnmeasuredElementRule}, inp::Dict{Element,Float64})::Dict{Element,Float64}\n\nA null UnmeasuredElementRule.  Just returns the inputs.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.computeZAFs-Tuple{Iteration,Material,Dict{KRatio,MultiZAF}}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.computeZAFs","text":"computeZAFs(\n    iter::Iteration,\n    est::Material,\n    stdZafs::Dict{KRatio,MultiZAF}\n)::Dict{Element, Float64}\n\nGiven an estimate of the composition compute the corresponding k-ratios.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.correctkratios-Tuple{AbstractArray{KRatio,1},Material,Real}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.correctkratios","text":"correctkratios(krs::AbstractVector{KRatio}, coating::Material, θtoa::Real, ρz::Real)::Vector{KRatio}\n\nThis function is mainly for pedagogical purposes.  It takes a KRatio[], a coating Material on the unknown, and a mass-thickness (g/cm²) and creates a new KRatio[] that accounts for the intensity missing due to absorption by the coating.  Favor the coating correction built into ZAFCorrection or MultiZAF.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.dEdρs-Tuple{Type{XPP},Material,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.dEdρs","text":"dEdρs(args::Dict{Label,AbstractFloat}, mat::MaterialLabel, Ekev::AbstractFloat, elms)\n\nThe function P&P uses to describe the deceleration of an electron in a material. Output units are (keV/cm)/(g/cm^3) = keV cm^2/g. (PAP eqn 5)\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.detail-Tuple{Type{DataFrames.DataFrame},AbstractArray{Tuple{MultiZAF,MultiZAF},N} where N,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.detail","text":"detail(::Type{DataFrame}, mzs::AbstractArray{Tuple{MultiZAF, MultiZAF}})::DataFrame\n\nTabulate the details of a matrix correction relative to the specified unknown and standard in a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.detail-Tuple{Type{DataFrames.DataFrame},MultiZAF,MultiZAF,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.detail","text":"detail(::Type{DataFrame}, unk::MultiZAF, std::MultiZAF)::DataFrame\n\nTabulate each term in the MultiZAF matrix correction in a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.familyfactor-Tuple{AtomicSubShell,AtomicSubShell}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.familyfactor","text":"familyfactor(shellA::AtomicSubShell, shellB::AtomicSubShell)::Float64\n\nAccounts for the differences in ionization cross section between K , L and M shells\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.fluorescencecorrection-Tuple{Type{ReedFluorescence},Material,Array{CharXRay,1},AtomicSubShell,Float64}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.fluorescencecorrection","text":"fluorescencecorrection(::Type{ReedFluorescence}, comp::Material, primary::Vector{CharXRay}, secondary::AtomicSubShell, e0::Float64)\n\nConstruct an instance of a ReedFluorescence correction structure to compute the secondary fluorescence due to a primary characteristic X-ray in the specified material and beam energy.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.fluorescencecorrection-Tuple{Type{var\"#s32\"} where var\"#s32\"<:FluorescenceCorrection,Material,AtomicSubShell,Float64}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.fluorescencecorrection","text":"fluorescence(fltype::Type{ReedFluorescence}, comp::Material, secondary::AtomicSubShell, e0::Float64)\n\nConstruct an instance of a fltype correction structure to compute the secondary fluorescence in the specified material and beam energy.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.gZAFc-Tuple{MultiZAF,MultiZAF,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.gZAFc","text":"gZAFc(unk::MultiZAF, std::MultiZAF, θunk::AbstractFloat, θstd::AbstractFloat)\ngZAFc(kr::KRatio, unkComp::Material; mc::Type{<:MatrixCorrection} = XPP, fc::Type{<:FluorescenceCorrection} = ReedFluorescence, cc::Type{<:CoatingCorrection} = Coating)\n\nThe combined generation, atomic number, absorption and generation corrections.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.generation-Tuple{MultiZAF,MultiZAF}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.generation","text":"generation(unk::MultiZAF, std::MultiZAF)\n\nThe generation correction for unk relative to std.  Usually, 1.0 unless the standard and unknown were collected at different beam energies.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.generation-Tuple{ZAFCorrection,ZAFCorrection,AtomicSubShell}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.generation","text":"generation(unk::ZAFCorrection, std::ZAFCorrection, ass::AtomicSubShell)\n\nComputes a correction factor for differences X-ray generation due to differences in beam energy.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.invS-Tuple{Type{XPP},Any,Any,Any,Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.invS","text":"invS(U0, V0, M, D, P, T)\n\nComputes 1/S where S is the stopping power.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ionizationdepthratio-Tuple{AtomicSubShell,AtomicSubShell,Float64}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ionizationdepthratio","text":"ionizationdepthratio(primary::AtomicSubShell, secondary::AtomicSubShell, e0::Float64)\n\nIonization depth ratio from \"Reed S.J.B. (1990) Microbeam Analysis, p.109\"\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ionizationfraction-Tuple{AtomicSubShell}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ionizationfraction","text":"ionizationfraction(shell::AtomicSubShell)\n\nThe fraction of the ionizations to attribute to the specified shell.  Computed from the jump ratio.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.k-Tuple{MultiZAF,MultiZAF,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.k","text":"k(unk::MultiZAF, std::MultiZAF, θunk::AbstractFloat, θstd::AbstractFloat)\n\nThe computed k-ratio for the unknown relative to standard.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.k-Tuple{ZAFCorrection,ZAFCorrection,CharXRay,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.k","text":"k(unk::MultiZAF, std::MultiZAF, θunk::AbstractFloat, θstd::AbstractFloat)\n\nThe computed k-ratio for the unknown relative to standard.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.kcoating-Tuple{Type{var\"#s13\"} where var\"#s13\"<:MatrixCorrection,Material,Material,CharXRay,Real,Real,Real}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.kcoating","text":"kcoating(ty::Type{<:MatrixCorrection}, subtrate::Material, coating::Material, cxr::CharXRay, e0::Real, toa::Real, τ::Real)\n\nEstimate the k-ratio for a coating of mass-thickness τ (g/cm²) on the specified substrate. The standard for the coating is assumed to be of the same material as the coating.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.lenardcoefficient-Tuple{Float64,AtomicSubShell}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.lenardcoefficient","text":"lenardcoefficient(e0::Float64, ashell::AtomicSubShell)\n\nComputes the Lenard coefficient according to the algorithm of Heinrich. \"Heinrich K. F. J. (1967) EPASA 2, paper no. 7\"\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.m-Tuple{Type{XPP},AtomicSubShell}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.m","text":"m(ashell::AtomicSubShell)\n\nReturns the ionization cross-section exponent for QlA(U,El,m(ashell))\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.massthickness-Tuple{Type{var\"#s13\"} where var\"#s13\"<:MatrixCorrection,Material,Material,CharXRay,Real,Real,Real}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.massthickness","text":"\"     massthickness(ty::Type{<:MatrixCorrection}, subtrate::Material, coating::Material, cxr::CharXRay, e0::Real, toa::Real, k::Real)\n\nEstimate the mass-thickness of a ultra-thin layer of a coating material on a substrate from a measured k-ratio k of a characteristic X-ray cxr.  Works for k-ratios of the order of 1 %.  The standard for the coating is assumed to be of the same material as the coating.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.matrixcorrection-Tuple{Type{XPP},Material,AtomicSubShell,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.matrixcorrection","text":"matrixcorrection(::Type{XPP}, mat::Material, ashell::AtomicSubShell,e0)\n\nConstructs an instance of the XPP algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.quantify-Tuple{Iteration,String,Array{KRatio,1}}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.quantify","text":"quantify(iter::Iteration, label::Label, measured::Vector{KRatio}, maxIter::Int = 100)::IterationResult\nquantify(iter::Iteration, name::String, measured::Vector{KRatio})::IterationResult\nquantify(ffr::FitResult; strip::AbstractVector{Element} = Element[], mc::Type{<:MatrixCorrection} = XPP, fl::Type{<:FluorescenceCorrection} = ReedFluorescence, cc::Type{<:CoatingCorrection} = Coating)::IterationResult\n\nPerform the iteration procedurer as described in iter using the measured k-ratios to produce the best estimate Material in an IterationResult object.  The third form makes it easier to quantify the k-ratios from filter fit spectra.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.quantify-Tuple{NeXLSpectrum.FitResult}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.quantify","text":"quantify(ffr::FitResult, strip::AbstractVector{Element} = [], mc::Type{<:MatrixCorrection} = XPP, fl::Type{<:FluorescenceCorrection} = ReedFluorescence)::IterationResult\n\nFacilitates quantifying FilterFitResult or BasicFitResult objects from extracting k-ratios from measured spectra.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.reset-Tuple{WegsteinUpdateRule}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.reset","text":"reset(weg::WegsteinUpdateRule)\n\nRestart the WegsteinUpdateRule accumulators.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.source-Tuple{IterationResult}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.source","text":"The source of the k-ratio data as a Label (often a CharXRayLabel).\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.steps1","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.steps1","text":"steps1(sample, elms, shell, all)\n\nsteps1 requires as data MassFractionLabel, AtomicWeightLabel, JzLabel, E0Label, mLabel in an UncertainValues\n\n\n\n\n\n","category":"function"},{"location":"#NeXLMatrixCorrection.steps2","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.steps2","text":"steps2(sample, shell, all)\n\nsteps2 requires as data μoρLabel, dzLabel in an UncertainValues\n\n\n\n\n\n","category":"function"},{"location":"#NeXLMatrixCorrection.steps3","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.steps3","text":"steps3(sample, xray, layer, all)\n\nsteps3 requires as data tcLabel, μoρLabel for the coating in an UncertainValues\n\n\n\n\n\n","category":"function"},{"location":"#NeXLMatrixCorrection.update-Tuple{NaiveUpdateRule,Material,Array{KRatio,1},Dict{Element,Float64}}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.update","text":"update(\n    ::NaiveUpdateRule,\n    prevcomp::Material,\n    measured::Vector{KRatio},\n    zafs::Dict{Element, Float64}\n)::Dict{Element,Float64}\n\nDetermine the next estimate of the composition that brings the estimate k-ratios closer to measured.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.zafcorrection","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.zafcorrection","text":"zafcorrection(\n  mctype::Type{<:MatrixCorrection},\n  fctype::Type{<:FluorescenceCorrection},\n  cctype::Type{<:CoatingCorrection},\n  mat::Material,\n  cxrs,\n  e0,\n  coating=missing\n)\n\nConstructs a MultiZAF around the mctype and fctype algorithms for a collection of CharXRay cxrs.\n\n\n\n\n\n","category":"function"},{"location":"#NeXLMatrixCorrection.zafcorrection-Tuple{Type{var\"#s23\"} where var\"#s23\"<:MatrixCorrection,Type{var\"#s24\"} where var\"#s24\"<:FluorescenceCorrection,Type{var\"#s25\"} where var\"#s25\"<:CoatingCorrection,Material,AtomicSubShell,Real,Union{Missing, AbstractArray{Film,1}, Film}}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.zafcorrection","text":"zafcorrection(\n  mctype::Type{<:MatrixCorrection},\n  fctype::Type{<:FluorescenceCorrection},\n  cctype::Type{<:CoatingCorrection},\n  mat::Material,\n  ashell::AtomicSubShell,\n  e0::Real,\n  coating::Union{Film,AbstractVector{Film},Missing}\n)\n\nConstructs an ZAFCorrection object using the mctype correction model with the fluorescence model for the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.zafcorrection-Tuple{Type{var\"#s26\"} where var\"#s26\"<:MatrixCorrection,Type{var\"#s25\"} where var\"#s25\"<:FluorescenceCorrection,Type{var\"#s24\"} where var\"#s24\"<:CoatingCorrection,Material,Material,Any,Real}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.zafcorrection","text":"zafcorrection(\n  mctype::Type{<:MatrixCorrection},\n  fctype::Type{<:FluorescenceCorrection},\n  cctype::Type{<:CoatingCorrection},\n  unk::Material,\n  std::Material,\n  cxrs,\n  e0;\n  unkCoating::Union{Film,AbstractVector{Film},Missing} = missing,\n  stdCoating::Union{Film,AbstractVector{Film},Missing} = missing,\n)\n\nConstructs a tuple of MultiZAF around the mctype and fctype correction algorithms for the unknown and standard for a collection of CharXRay cxrs.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.zafcorrection-Tuple{Type{var\"#s30\"} where var\"#s30\"<:MatrixCorrection,Type{var\"#s31\"} where var\"#s31\"<:FluorescenceCorrection,Type{var\"#s32\"} where var\"#s32\"<:CoatingCorrection,Material,Material,AtomicSubShell,Real}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.zafcorrection","text":"zafcorrection(\n   mctype::Type{<:MatrixCorrection},\n   fctype::Type{<:FluorescenceCorrection},\n   cctype::Type{<:CoatingCorrection},\n   unk::Material,\n   std::Material,\n   ashell::AtomicSubShell,\n   e0::Real;\n   unkCoating::Union{Film,AbstractVector{Film},Missing} = missing,\n   stdCoating::Union{Film,AbstractVector{Film},Missing} = missing,\n)\n\nCreates a matched pair of ZAFCorrection objects using the matrix correction algorithm for the specified unknown and standard.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.χ-Tuple{Material,CharXRay,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.χ","text":"χ(mat::Material, xray::CharXRay, θtoa)\n\nAngle adjusted mass absorption coefficient.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ϕ-Tuple{MatrixCorrection,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ϕ","text":"ϕ(mc::MatrixCorrection, ρz)\n\nThe ϕ(ρz)-curve for visualization and other purposes.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ϕ-Tuple{XPP,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ϕ","text":"ϕ(ρz, xpp::XPP)\n\nComputes the ϕ(ρz) curve according to the XPP algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ϕ0-Tuple{Type{XPP},Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ϕ0","text":"ϕ0(U0, ηbar)\n\nThe value of the ϕ(ρz) curve at ρz=0.0.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ϕabs-Tuple{MatrixCorrection,Any,CharXRay,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ϕabs","text":"ϕabs(mc::MatrixCorection, ρz, xray::CharXRay, θtoa::AbstractFloat)\n\nComputes the absorbed ϕ(ρz) curve according to the XPP algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLMatrixCorrection.ϕxpp-Tuple{Type{XPP},Any,Any,Any,Any,Any,Any}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLMatrixCorrection.ϕxpp","text":"ϕxpp(ρz, A, a, B, b, ϕ0)\n\nCompute the shape of the ϕ(ρz) curve in the XPP model.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLUncertainties.asa-Tuple{Type{DataFrames.DataFrame},AbstractArray{Tuple{MultiZAF,MultiZAF},N} where N,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLUncertainties.asa","text":"asa(::Type{DataFrame}, mzs::AbstractArray{Tuple{MultiZAF,MultiZAF}}, θunk::AbstractFloat, θstd::AbstractFloat)::DataFrame\n\nTabulate a matrix correction relative to a specified Dict of unknowns and standards in a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLUncertainties.asa-Tuple{Type{DataFrames.DataFrame},MultiZAF,MultiZAF,AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLUncertainties.asa","text":"asa(::Type{DataFrame}, unk::MultiZAF, std::MultiZAF, θunk::AbstractFloat, θstd::AbstractFloat)::DataFrame\n\nTabulate a matrix correction relative to the specified unknown and standard in a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLUncertainties.asa-Tuple{Type{DataFrames.DataFrame},RecordingUpdateRule}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLUncertainties.asa","text":"NeXLUncertainties.asa(::Type{DataFrame}, rur::RecordingUpdateRule)::DataFrame\n\nTabulate the iteration steps in a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#NeXLUncertainties.asa-Tuple{Type{DataFrames.DataFrame},ZAFCorrection,ZAFCorrection,AbstractArray{Transition,1},AbstractFloat,AbstractFloat}","page":"(Image: )MatrixCorrection - Part of the NeXL X-ray Microanalysis Library","title":"NeXLUncertainties.asa","text":"NeXLUncertainties.asa(::Type{DataFrame}, unk::ZAFCorrection, std::ZAFCorrection, trans::AbstractVector{Transition},\nθunk::AbstractFloat, θstd::AbstractFloat)::DataFrame\n\nTabulate a matrix correction relative to the specified unknown and standard for the iterable of Transition, trans.\n\n\n\n\n\n","category":"method"},{"location":"example/#A-Simple-Example-using-NeXLMatrixCorrection","page":"Example","title":"A Simple Example using NeXLMatrixCorrection","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Load the necessary libraries","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using NeXLMatrixCorrection  # Inplements the algorithms (auto-loads NeXLCore)\nusing DataFrames            # For the table","category":"page"},{"location":"example/#Convert-k-ratios-to-composition.","page":"Example","title":"Convert k-ratios to composition.","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Define the measurement conditions","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"lbl = label(\"K458\")  # This labels the measurement\n# Define the measurement properties (:BeamEnery and :TakeOffAngle are required by most matrix correction algorithms)\nunkProps = Dict(:BeamEnergy=>15.0e3, :TakeOffAngle=>deg2rad(40.0), :Coating=>Film(pure(n\"C\"), 7.0e-7))\nstdProps = Dict(:BeamEnergy=>15.0e3, :TakeOffAngle=>deg2rad(40.0), :Coating=>Film(pure(n\"C\"), 15.0e-7))\n# Create a list of the measurement k-ratios.\nkrs = [\n    KRatio([n\"O K-L3\"], unkProps, stdProps, mat\"SiO2\", uv(0.746227,0.0010) ),\n    KRatio([n\"Si K-L3\"], unkProps, stdProps, mat\"SiO2\", uv(0.441263,0.0012) ),\n    KRatio([n\"Zn K-L3\"], unkProps, stdProps, mat\"Zn\", uv(0.027776,0.0002) ),\n    KRatio([n\"Ba L3-M5\"], unkProps, stdProps, mat\"BaCl\", uv(0.447794,0.0020) )\n]","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"4-element Array{KRatio,1}:\n k[SiO2, O K-L3] = 0.74623 ± 0.001\n k[SiO2, Si K-L3] = 0.44126 ± 0.0012\n k[Zn, Zn K-L3] = 0.027776 ± 0.0002\n k[BaCl, Ba L3-M5] = 0.44779 ± 0.002","category":"page"},{"location":"example/#Perform-the-Iteration","page":"Example","title":"Perform the Iteration","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"# Now perform the iteration on the k-ratios\nres = quantify(lbl, krs)\n# Tabulate the results...\nasa(DataFrame, res, withZAF=true)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"4×14 DataFrame. Omitted printing of 1 columns\n│ Row │ Label │ Element │ Standard │ Lines    │ Mass Frac. │ Δ[Mass Frac.] \n│ k[Meas]  │ Δk[Meas] │ Generation │ Z        │ A        │ F        │ Coati\nng  │\n│     │ Label │ String  │ String   │ String   │ Float64    │ Float64       \n│ Float64? │ Float64? │ Float64?   │ Float64? │ Float64? │ Float64? │ Float\n64? │\n├─────┼───────┼─────────┼──────────┼──────────┼────────────┼───────────────\n┼──────────┼──────────┼────────────┼──────────┼──────────┼──────────┼──────\n────┤\n│ 1   │ K458  │ Si      │ SiO2     │ Si K-L3  │ 0.23133    │ 0.00063       \n│ 0.441263 │ 0.0012   │ 1.0        │ 1.16228  │ 0.767812 │ 1.00007  │ 0.999\n057 │\n│ 2   │ K458  │ Ba      │ BaCl     │ Ba L3-M5 │ 0.4218     │ 0.0019        \n│ 0.447794 │ 0.002    │ 1.0        │ 0.816548 │ 1.03873  │ 0.994896 │ 0.999\n944 │\n│ 3   │ K458  │ O       │ SiO2     │ O K-L3   │ 0.32701    │ 0.00044       \n│ 0.746227 │ 0.001    │ 1.0        │ 1.15781  │ 1.07826  │ 0.999621 │ 0.973\n821 │\n│ 4   │ K458  │ Zn      │ Zn       │ Zn K-L3  │ 0.030727   │ 0.00022       \n│ 0.027776 │ 0.0002   │ 1.0        │ 0.919149 │ 0.983471 │ 1.0      │ 0.999\n993 │","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Now take a slightly different perspective that focuses more on iteration related data.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"asa(DataFrame, res, withZAF=false)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"4×8 DataFrame\n│ Row │ Label │ Element │ Converged │ Iterations │ Mass Frac. │ Δ[Mass Frac\n.] │ k[Meas]  │ k[Comp]   │\n│     │ Label │ String  │ Bool      │ Int64      │ Float64    │ Float64    \n   │ Float64? │ Float64?  │\n├─────┼───────┼─────────┼───────────┼────────────┼────────────┼────────────\n───┼──────────┼───────────┤\n│ 1   │ K458  │ Si      │ 1         │ 7          │ 0.23133    │ 0.00063    \n   │ 0.441263 │ 0.441263  │\n│ 2   │ K458  │ Ba      │ 1         │ 7          │ 0.4218     │ 0.0019     \n   │ 0.447794 │ 0.447791  │\n│ 3   │ K458  │ O       │ 1         │ 7          │ 0.32701    │ 0.00044    \n   │ 0.746227 │ 0.746226  │\n│ 4   │ K458  │ Zn      │ 1         │ 7          │ 0.030727   │ 0.00022    \n   │ 0.027776 │ 0.0277758 │","category":"page"}]
}
